import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import openai
import requests
from bs4 import BeautifulSoup
import aiohttp
from urllib.parse import quote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = '7987759481:AAH15QEjfrVo0WquQDgN6FiUDNMy1z0RVtY'
OPENAI_API_KEY = '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'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á OpenAI
SERPER_API_KEY = '2acc6a32f0a821eb77ef33a98134cdc6b8830168'  # –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://serper.dev

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google (–∏—Å–ø–æ–ª—å–∑—É—è Serper API)
async def search_google(query):
    url = "https://google.serper.dev/search"
    headers = {
        'X-API-KEY': SERPER_API_KEY,
        'Content-Type': 'application/json'
    }
    payload = {
        'q': query,
        'num': 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:
                results = await response.json()
                return results.get('organic', [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async def get_page_content(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for tag in soup(['script', 'style', 'meta', 'link']):
                    tag.decompose()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
                text = soup.get_text(separator='\n', strip=True)
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
                lines = [line.strip() for line in text.splitlines() if line.strip()]
                text = '\n'.join(lines)
                
                return text[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return ""   
async def process_with_chatgpt(query, search_results, user_role):
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        context = "\n\n".join([f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}:\n{result.get('snippet', '')}"
                              for i, result in enumerate(search_results)])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        prompt = f"""–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫—Ä–∞—Ç–∫–æ–π –æ—Ü–µ–Ω–∫–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–≤—ã–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–≤–∏—Ç—ã —É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä–æ–≥ –∫ –∞–Ω–∞–ª–∏–∑—É –≤–µ–¥—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –Ω—É–∂–Ω—ã —Å–∞–º—ã–µ –Ω–∞–∏–ª—É—á—à–∏–µ –∏ —Å–∞–º—ã–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª—é–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞: {context}

–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}

–¢–≤–æ—è —Ü–µ–ª—å:

1. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
2. –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤—ã—Å–æ–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–Ω–∏–∑–∫–∏–π") –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.
3. –û–ø—Ä–µ–¥–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∫–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –Ω–∞–≤—ã–∫–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∫–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —É –Ω–µ–≥–æ –º–æ–≥–ª–∏ —Ä–∞–∑–≤–∏—Ç—å—Å—è? –ï—Å–ª–∏ –æ–Ω –±—ã–ª —É—á–∏—Ç–µ–ª–µ–º –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω –º–æ–≥ —Ä–∞–∑–≤–∏—Ç—å?
4. –ü—Ä–∏—Å–≤–æ–π –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10, –∏—Å—Ö–æ–¥—è –∏–∑ —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ–¥–µ–Ω–∏—è.

–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:

- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (—Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è).
- –í–µ—Ä–æ—è—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞–∑–≤–∏–≤–∞–µ–º—ã–µ —É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤).
- –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 10) —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        completion = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.7
        )
        
        return completion.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ ChatGPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 'AlmaU' –∏–ª–∏ '–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?'"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def search_place_info(place_name):
    # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ, –≤–∫–ª—é—á–∞—è –æ—Ç–∑—ã–≤—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    query = f"{place_name} –æ—Ç–∑—ã–≤—ã, —Ä–µ–π—Ç–∏–Ω–≥,–Ω–æ–≤–æ—Å—Ç–∏, —Ä–µ–ø—É—Ç–∞—Ü–∏—è"
    return await search_google(query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def process_query(message: types.Message):
    query = message.text
    user_role = '—Å—Ç—É–¥–µ–Ω—Ç'
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
        search_results = await search_place_info(query)
        
        if not search_results:
            await processing_msg.edit_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT
        response = await process_with_chatgpt(query, search_results,user_role)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join([f"üîó {result.get('title', '–ò—Å—Ç–æ—á–Ω–∏–∫')}: {result.get('link', '#')}" for result in search_results[:3]])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        final_response = f"{response}\n{sources}"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(final_response) > 4096:
            for x in range(0, len(final_response), 4096):
                part = final_response[x:x+4096]
                if x == 0:
                    await processing_msg.edit_text(part)
                else:
                    await message.answer(part)
        else:
            await processing_msg.edit_text(final_response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await processing_msg.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
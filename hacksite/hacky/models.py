from django.db import models
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.exceptions import ValidationError
from typing import Any
import json
import re
import logging

logger = logging.getLogger(__name__)

class Resume(models.Model):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    file = models.FileField(upload_to='resumes/', verbose_name='–§–∞–π–ª —Ä–µ–∑—é–º–µ')
    uploaded_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    full_name = models.CharField(max_length=255, blank=True, null=True, verbose_name='–§–ò–û')
    age = models.CharField(max_length=50, blank=True, null=True, verbose_name='–í–æ–∑—Ä–∞—Å—Ç')
    location = models.CharField(max_length=255, blank=True, null=True, verbose_name='–õ–æ–∫–∞—Ü–∏—è')
    
    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç
    education = models.TextField(blank=True, null=True, verbose_name='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
    work_experience = models.TextField(blank=True, null=True, verbose_name='–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    career_progression = models.TextField(blank=True, null=True, verbose_name='–ö–∞—Ä—å–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è')
    
    # –ù–∞–≤—ã–∫–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    technical_skills = models.TextField(blank=True, null=True, verbose_name='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏')
    soft_skills = models.TextField(blank=True, null=True, verbose_name='Soft skills')
    personality_profile = models.TextField(blank=True, null=True, verbose_name='–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å')
    achievements = models.TextField(blank=True, null=True, verbose_name='–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
    
    # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    motivation = models.TextField(blank=True, null=True, verbose_name='–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è')
    corporate_compatibility = models.TextField(blank=True, null=True, verbose_name='–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
    recommended_positions = models.TextField(blank=True, null=True, verbose_name='–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏')
    career_plan = models.TextField(blank=True, null=True, verbose_name='–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω')
    
    # –û—Ü–µ–Ω–∫–∞
    rating = models.IntegerField(
        default=0, 
        validators=[MinValueValidator(0), MaxValueValidator(100)],
        verbose_name='–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥'
    )
    advantages = models.TextField(blank=True, null=True, verbose_name='–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞')
    growth_zones = models.TextField(blank=True, null=True, verbose_name='–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞')
    recommendations = models.TextField(blank=True, null=True, verbose_name='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    risks = models.TextField(blank=True, null=True, verbose_name='–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analysis_result = models.TextField(blank=True, null=True, verbose_name='–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑')

    def __str__(self):
        name = self.full_name if self.full_name else f"–†–µ–∑—é–º–µ ‚Ññ{self.id}"
        return f"{name} ({self.uploaded_at.strftime('%d.%m.%Y')})"
    
    class Meta:
        verbose_name = '–†–µ–∑—é–º–µ'
        verbose_name_plural = '–†–µ–∑—é–º–µ'
        ordering = ['-uploaded_at']
        indexes = [
            models.Index(fields=['rating']),
            models.Index(fields=['location']),
            models.Index(fields=['uploaded_at']),
            models.Index(fields=['full_name']),
            # –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
            models.Index(fields=['rating', 'location']),
        ]

    def clean(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        super().clean()
        if self.rating < 0 or self.rating > 100:
            raise ValidationError({'rating': '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100'})

    def save(self, *args: Any, **kwargs: Any) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        self.full_clean()
        super().save(*args, **kwargs)

    def save_recommended_positions(self, positions_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        if isinstance(positions_data, str):
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                positions = []
                for line in positions_data.split('\n'):
                    if 'üìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:' in line:
                        position = line.split('üëî')[1].split('üìä')[0].strip()
                        match = re.search(r'(\d+)%', line)
                        if match:
                            percentage = int(match.group(1))
                            positions.append({
                                'position': position,
                                'match_percentage': percentage
                            })
                self.recommended_positions = json.dumps(positions)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
                self.recommended_positions = positions_data
        else:
            self.recommended_positions = json.dumps(positions_data)